#! /bin/bash

#	mkcert -- generate new certificate requested by CSR

#	    usage: mkcert common_name [ args ]
#
#	    A CSR is used to generate a certificate that is then signed by the CA.
#	    The "common_name" is used to derive the csr and certificate names unless
#	    overridden by the "-in" and/or "-out" arguments.  The common_name for
#	    server certificates should be the server DNS domain name to avoid confusion.
#	    For client certificates, an email address (of ssh address) is best.
#
#	    The newly issued certificate is checked against the CA certificate chain if
#	    the registry is provided.
#
#	    The script expects to be run in the certificate authority folder.
#	    This can be set by setting CA_BASE_DIR. In this directory, it expects
#	    the configuration file, certs directory, the database, and csr directory (etc).
#
#           The configuration, cert, and csr file names should either be relative to the
#           CA_BASE_DIR or a full path name.
#
#	    Unless the "-client" argument is supplied, a server certificate is issued.
#

set -e

cd ${CA_BASE_DIR:=.}

common_name="$1"

csr_name="csr/${common_name}.csr.pem"
cert_name="certs/${common_name}.cert.pem"
config_name="openssl.cnf"
cert_type="server_cert"

unset registry

usage() {
    echo "${0##*/}: $1" 2>&1
    echo "usage: ${0##*/} common-name \\" 2>&1
    echo "	[ -config config-file ] \\" 2>&1
    echo "	[ -in csr-file ] \\" 2>&1
    echo "	[ -out cert-file ] \\ " 2>&1
    echo "	[ -registry registry ] " 2>&1
    echo "	[ -client ] " 2>&1
    exit 1
}

bundlefile="/tmp/bundle.$$.pem"
cleanup() {
    status="$?"

    echo In Cleanup
    /bin/rm -f "$bundlefile"
    exit $status
}

#	argument checking and processing
#

if [ $# -eq 0 ]
then
    usage "no arguments provided"
fi

shift

while [ $# -gt 0 ]
do
    arg="$1"

    case "$arg" in
	-config)
	    config_name="$2"
	    shift
	    ;;
	-in)
	    csr_name="$2"
	    shift
	    ;;
	-out)
	    cert_name="$2"
	    shift
	    ;;
	-registry)
	    registry="$2"
	    shift
	    ;;
	-client)
	    cert_type="usr_cert"
	    ;;
	*)
	    usage "unrecognized argument: $arg"
	    ;;
    esac
    shift
done

if [ ! -f "$config_name" ]
then
    usage "could not find configuration file: $config_name"
fi

if [ ! -f "$csr_name" ]
then
    usage "could not find CSR file: $csr_name"
fi

if [[ "$registry" && ( ! -d "$registry" ) ]]
then
    usage "could not find registry: $registry"
fi

#	if we already have a (read-only) cert, remove it so openssl can over-write it
#
/bin/rm -f "$cert_name"

# create the cert and sign it
#
openssl ca \
    -config "$config_name" \
    -in "$csr_name" \
    -out "$cert_name" \
    -extensions "$cert_type" -days 375 -notext -md sha256

chmod 444 "$cert_name"

#	print the cert
#
openssl x509 -noout -text -in ${cert_name}

#	verify the cert if we have a registry reference
#
if [ ! $registry ]
then
    exit 0
fi

trap cleanup HUP INT TERM ERR

bundlebase="`pubcert -i -v "$registry" "${cert_name}"`"
bldchain "$registry" "$bundlebase" > "$bundlefile"

openssl verify -CAfile "$bundlefile" "${cert_name}"

rm $bundlefile
