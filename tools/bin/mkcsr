#! /bin/bash

#	mkcsr -- create certificate signing request

#	    usage: mkcsr common_name [-key <file>] [-subj <subject string>] [-config <file>]
#
#	    A CSR and new, unencrypted private key are generated using the common_name
#	    to derive file names for these artifacts as well as to compose the "subj"
#	    string in the CSR. The csr and new key are created in the current directory.
#
#	    If the "-key <file>" argument is provided, no new key is generated and
#	    this key is used to sign the csr.  It can be encrypted or not.
#
#	    If the "-subj <string>" argument is provided, it is passed directly to
#	    openssl.
#
#	    If the "-config <file>" argument is provided, it is used as the openssl config
#	    file.  Otherwise, the default (often "./openssl.cnf") is used.
#
#	    Note that in modern times, client certificates need "SAN"'s.  These are defined
#	    in the config file.
#
#	    TODO: make the specification/definition of subject string, common name, and SAN's
#		consistent.  Currently it is a sort of mix between config file (with defaults) and
#		the command line (with defaults).

common_name="$1"
unset key_name

#	subject string example for xANNA issued certificates
#	you will want to change this for your organization so clients will
#	have consistent requests!  If default setting is null, you must
#	supply the subject string on the command line.
subject_string="/C=FR/ST=(none)/L=(none)/O=remulac/OU=(none)/CN=${common_name}"
#subject_string=

#       unless a config file is given, use the default (often "openssl.cnf" in the CWD)
unset config_file

usage() {
    echo "${0##*/}: $1" 2>&1
    echo "usage: ${0##*/} common-name [-key file] [-subj <subject string>] [-config <file>]" 2>&1
    exit 1
}

#	argument checking and processing
#

if [ $# -eq 0 ]
then
    usage "no arguments provided"
fi

shift

while [ $# -gt 0 ]
do
    arg="$1"

    case "$arg" in
	-key)
	    key_name="$2"
	    shift
	    ;;
	-subj)
	    subject_string="$2"
	    shift
	    ;;
	-config)
	    config_file="$2"
	    shift
	    ;;
	*)
	    usage "unrecognized argument: $arg"
	    ;;
    esac
    shift
done

if [ ! "$subject_string" ]
then
    usage "subject string must not be null"
fi

if [ "$config_file" -a ! -r "$config_file" ]
then
    usage "\"$config_file\" not found"
fi

#	if needed, generate our unencrypted private key to sign our CSR and TLS challanges
#
if [ ! "$key_name" ]
then
    key_name="${common_name}.key.pem"
    /bin/rm -f "$key_name"
    openssl genrsa -out "$key_name" 2048
    chmod 400 "$key_name"
fi

csr_name="${common_name}.csr.pem"

# create the CSR
#
if [ "$config_file" ]
then
    openssl req -new -sha256 -key "$key_name" -out $csr_name -subj "$subject_string" -config "$config_file"
else
    openssl req -new -sha256 -key "$key_name" -out $csr_name -subj "$subject_string"
fi

#	print the csr
#
openssl req -noout -text -in ${csr_name}
